% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/QcConfigSignal.R
\docType{class}
\name{QcConfigSignal-class}
\alias{QcConfigSignal-class}
\alias{QcConfigSignal}
\alias{QcConfigSignal.null}
\alias{QcConfigSignal.parse}
\alias{QcConfigSignal.files}
\alias{fetch_signal_at_features}
\alias{QcConfigSignal.save_config}
\title{QcConfigSignal}
\usage{
QcConfigSignal(
  config_df,
  run_by = "All",
  to_run = NULL,
  to_run_reference = NULL,
  color_by = "file",
  color_mapping = NULL,
  read_mode = NULL,
  view_size = getOption("SQC_VIEW_SIZE", 3000),
  fetch_options = list(),
  cluster_value = NULL,
  linearQuantile_cutoff = 0.98,
  sort_value = NULL,
  sort_method = c("hclust", "sort")[2],
  plot_value = NULL,
  heatmap_limit_values = c(0, 10),
  lineplot_free_limits = TRUE,
  is_null = FALSE
)

QcConfigSignal.null()

QcConfigSignal.parse(signal_config_file)

QcConfigSignal.files(
  file_paths,
  file_paths.input = character(),
  run_separately = TRUE,
  sample_names = NULL,
  sample_names.split = NULL,
  group_names = NULL,
  group_name.input = "input",
  group_colors = NULL,
  view_size = getOption("SQC_VIEW_SIZE", 3000),
  read_mode = NULL,
  cluster_value = NULL,
  linearQuantile_cutoff = 0.98,
  sort_value = NULL,
  plot_value = NULL,
  sort_method = c("hclust", "sort")[2]
)

fetch_signal_at_features(qc_signal, query_gr, bfc = new_cache())

QcConfigSignal.save_config(object, file)
}
\arguments{
\item{config_df}{}

\item{run_by}{}

\item{to_run}{}

\item{to_run_reference}{}

\item{color_by}{}

\item{color_mapping}{}

\item{read_mode}{}

\item{view_size}{view size in bp to apply. Defaults to 3000.}

\item{fetch_options}{}

\item{cluster_value}{}

\item{linearQuantile_cutoff}{}

\item{sort_value}{}

\item{sort_method}{}

\item{is_null}{}

\item{signal_config_file}{Configuration file for signal data.}

\item{file_paths}{character paths to files}

\item{group_names}{vector of group names to assign from according to groups}

\item{group_colors}{vector of colors to use per group}

\item{qc_signal}{}

\item{query_gr}{}

\item{groups}{numeric vector of group assignments. 1 is first item in group_names, 2 is second, etc. Default is seq_along(file_path)}
}
\value{


QcConfigSignal object



a QcConfigSignal object




}
\description{
QcConfigSignal

QcConfigSignal

QcConfigSignal null placeholder

QcConfigSignal.files
}
\section{Slots}{

\describe{
\item{\code{view_size}}{}

\item{\code{read_mode}}{}

\item{\code{fetch_options}}{}

\item{\code{cluster_value}}{}

\item{\code{linearQuantile_cutoff}}{}

\item{\code{sort_value}}{}

\item{\code{sort_method}}{}

\item{\code{plot_value}}{}

\item{\code{heatmap_limit_values}}{}

\item{\code{lineplot_free_limits}}{}
}}

\examples{
bam_config_file = system.file(package = "ssvQC", "extdata/ssvQC_bam_config.csv")
bam_config_df = .parse_config_body(bam_config_file)
sig_conf = QcConfigSignal(bam_config_df)

bigwig_config_file = system.file(package = "ssvQC", "extdata/ssvQC_bigwig_config.csv")
bigwig_config_df = .parse_config_body(bigwig_config_file)
sig_conf.bw = QcConfigSignal(bigwig_config_df)
QcConfigSignal.null()
bam_config_file = system.file(package = "ssvQC", "extdata/ssvQC_bam_config.csv")
QcConfigSignal.parse(bam_config_file)

bigwig_config_file = system.file(package = "ssvQC", "extdata/ssvQC_bigwig_config.csv")
QcConfigSignal.parse(bigwig_config_file)
bam_files = dir(system.file(package = "ssvQC", "extdata"), pattern = "CTCF.+bam$", full.names = TRUE)
object = QcConfigSignal.files(bam_files)
plot(object)

object2 = QcConfigSignal.files(bam_files,
  sample_names = c("MCF10A_CTCF", "MCF10AT1_CTCF", "MCF10CA1a_CTCF"), 
  group_names = c("10A", "AT1", "CA1"),
  group_colors = c("firebrick", "slategray2", "forestgreen")
)
plot(object2)
bam_config_file = system.file(package = "ssvQC", "extdata/ssvQC_bam_config.csv")
qc_signal = QcConfigSignal.parse(bam_config_file)

feature_config_file = system.file(package = "ssvQC", "extdata/ssvQC_peak_config.csv")
qc_features = QcConfigFeatures.parse(feature_config_file)
query_gr = qc_features$assessment_features
fetch_signal_at_features(qc_signal, query_gr)
bam_config_file = system.file(package = "ssvQC", "extdata/ssvQC_bam_config.csv")
bam_config = QcConfigSignal.parse(bam_config_file)
#QcConfigSignal.save_config(bam_config, "bam_config.csv")

bigwig_config_file = system.file(package = "ssvQC", "extdata/ssvQC_bigwig_config.csv")
bigwig_config = QcConfigSignal.parse(bigwig_config_file)
#QcConfigSignal.save_config(bigwig_config, "bigwig_config.csv")
}
