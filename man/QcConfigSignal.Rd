% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/QcConfigSignal.R
\docType{class}
\name{QcConfigSignal-class}
\alias{QcConfigSignal-class}
\alias{QcConfigSignal}
\alias{QcConfigSignal.parse}
\alias{QcConfigSignal.files}
\alias{fetch_signal_at_features}
\alias{QcConfigSignal.save_config}
\title{QcConfigSignal}
\usage{
QcConfigSignal(
  config_df,
  run_by = "All",
  to_run = NULL,
  to_run_reference = NULL,
  color_by = "file",
  color_mapping = NULL,
  read_mode = NULL,
  view_size = getOption("SQC_VIEW_SIZE", 3000),
  fetch_options = list(),
  is_null = FALSE
)

QcConfigSignal.parse(signal_config_file)

QcConfigSignal.files(
  file_paths,
  groups = NULL,
  group_names = NULL,
  group_colors = NULL,
  view_size = getOption("SQC_VIEW_SIZE", 3000),
  read_mode = NULL
)

fetch_signal_at_features(qc_signal, query_gr)

QcConfigSignal.save_config(object, file)
}
\arguments{
\item{config_df}{}

\item{run_by}{}

\item{color_by}{}

\item{color_mapping}{}

\item{read_mode}{}

\item{view_size}{view size in bp to apply. Defaults to 3000.}

\item{signal_config_file}{}

\item{file_paths}{character paths to files}

\item{groups}{numeric vector of group assignments. 1 is first item in group_names, 2 is second, etc. Default is seq_along(file_path)}

\item{group_names}{vector of group names to assign from according to groups}

\item{group_colors}{vector of colors to use per group}

\item{qc_signal}{}

\item{query_gr}{}

\item{object}{}
}
\value{




a QcConfigSignal object




}
\description{
QcConfigSignal

Title

QcConfigSignal.files

Title

Title
}
\section{Slots}{

\describe{
\item{\code{view_size}}{numeric.}

\item{\code{read_mode}}{character.}

\item{\code{fetch_options}}{list.}
}}

\examples{
bam_config_file = system.file(package = "ssvQC", "extdata/ssvQC_bam_config.csv")
bam_config_df = .parse_config_body(bam_config_file)
sig_conf = QcConfigSignal(bam_config_df)

bigwig_config_file = system.file(package = "ssvQC", "extdata/ssvQC_bigwig_config.csv")
bigwig_config_df = .parse_config_body(bigwig_config_file)
sig_conf.bw = QcConfigSignal(bigwig_config_df)
bam_config_file = system.file(package = "ssvQC", "extdata/ssvQC_bam_config.csv")
QcConfigSignal.parse(bam_config_file)

bigwig_config_file = system.file(package = "ssvQC", "extdata/ssvQC_bigwig_config.csv")
QcConfigSignal.parse(bigwig_config_file)
bam_files = dir(system.file(package = "ssvQC", "extdata"), pattern = "CTCF.+bam$", full.names = TRUE)
QcConfigSignal.files(bam_files)
bam_config_file = system.file(package = "ssvQC", "extdata/ssvQC_bam_config.csv")
qc_signal = QcConfigSignal.parse(bam_config_file)

feature_config_file = system.file(package = "ssvQC", "extdata/ssvQC_peak_config.csv")
qc_features = QcConfigFeatures.parse(feature_config_file)
query_gr = qc_features$assessment_features
fetch_signal_at_features(qc_signal, query_gr)
bam_config_file = system.file(package = "ssvQC", "extdata/ssvQC_bam_config.csv")
bam_config = QcConfigSignal.parse(bam_config_file)

bigwig_config_file = system.file(package = "ssvQC", "extdata/ssvQC_bigwig_config.csv")
bigwig_config = QcConfigSignal.parse(bigwig_config_file)
}
