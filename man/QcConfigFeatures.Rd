% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/QcConfigFeatures.R
\docType{class}
\name{QcConfigFeatures-class}
\alias{QcConfigFeatures-class}
\alias{prepFeatures}
\alias{QcConfigFeatures}
\alias{QcConfigFeatures.null}
\alias{QcConfigFeatures.files}
\alias{QcConfigFeatures.parse}
\alias{QcConfigFeatures.save_config}
\title{QcConfigFeatures}
\usage{
prepFeatures(object, bfc = new_cache())

QcConfigFeatures(
  config_df,
  run_by = "All",
  to_run = NULL,
  to_run_reference = NULL,
  color_by = "file",
  color_mapping = NULL,
  feature_load_FUN = NULL,
  n_peaks = 1000,
  balance_groups = FALSE,
  overlap_extension = 0,
  consensus_fraction = getOption("SQC_CONSENSUS_FRACTION", 0),
  consensus_n = getOption("SQC_CONSENSUS_N", 1),
  process_features = getOption("SQC_PROCESS_FEATURES", TRUE),
  is_null = FALSE
)

QcConfigFeatures.null()

QcConfigFeatures.files(
  file_paths,
  run_separately = FALSE,
  group_names = NULL,
  groups = NULL,
  group_colors = NULL,
  feature_load_FUN = NULL,
  n_peaks = 1000,
  balance_groups = FALSE,
  overlap_extension = 0,
  consensus_fraction = getOption("SQC_CONSENSUS_FRACTION", 0),
  consensus_n = getOption("SQC_CONSENSUS_N", 1),
  process_features = getOption("SQC_PROCESS_FEATURES", TRUE)
)

QcConfigFeatures.parse(
  feature_config_file,
  process_features = getOption("SQC_PROCESS_FEATURES", TRUE)
)

QcConfigFeatures.save_config(object, file)
}
\arguments{
\item{object}{}

\item{config_df}{data.frame defining configuration parameters. At a minimum,
paths to valid files in either the first column or a column named "file".
Additional columns defined by color_by and run_by parameters have a big
impact on the configuration.}

\item{run_by}{character that defines the column of config_df that groups the features.  The default of "All" will simply group all features into a single comparison.}

\item{to_run}{}

\item{to_run_reference}{}

\item{color_by}{character that defines the column of config_df that controls color mapping. The default of "file" will assign a unique color to every feature set.}

\item{color_mapping}{named character vector that maps values of color_by to valid R colors, i.e. "red" or "#FF0000".}

\item{feature_load_FUN}{function that takes a vector of file paths and returns list of GRanges.}

\item{n_peaks}{number of peaks to subset for}

\item{balance_groups}{}

\item{overlap_extension}{}

\item{consensus_fraction}{A numeric between 0 and 1 specifying the fraction of grs that must overlap to be considered consensus.}

\item{consensus_n}{An integer number specifying the absloute minimum of input grs that must overlap for a site to be considered consensus.}

\item{process_features}{}

\item{is_null}{}

\item{file_paths}{character paths to files}

\item{group_names}{vector of group names to assign from according to groups}

\item{groups}{numeric vector of group assignments. 1 is first item in group_names, 2 is second, etc. Default is seq_along(file_path)}

\item{group_colors}{vector of colors to use per group}

\item{feature_config_file}{}
}
\value{


QcConfigFeatures object

QcConfigFeatures object

a QcConfigFeatures object




}
\description{
QcConfigFeatures

QcConfigFeatures

QcConfigFeatures null placeholder

QcConfigFeatures for files

QcConfigFeatures.parse
}
\section{Slots}{

\describe{
\item{\code{feature_load_FUN}}{function.}

\item{\code{n_peaks}}{numeric.}

\item{\code{consensus_fraction}}{numeric.}

\item{\code{consensus_n}}{numeric.}
}}

\examples{
feature_config_file = system.file(package = "ssvQC", "extdata/ssvQC_peak_config.csv")
config_df = .parse_config_body(feature_config_file)
config_df$file = file.path(system.file(package = "ssvQC", "extdata"), config_df$file)
feature_conf = QcConfigFeatures(config_df, process_features = TRUE)
QcConfigFeatures.null()
np_files = dir(system.file(package = "ssvQC", "extdata"), pattern = "Peak$", full.names = TRUE)
object = QcConfigFeatures.files(np_files, balance_groups = TRUE)
object = ssvQC.prepFeatures(object)
plot(object)
feature_config_file = system.file(package = "ssvQC", "extdata/ssvQC_peak_config.csv")
object = QcConfigFeatures.parse(feature_config_file)
plot(object)
feature_config_file = system.file(package = "ssvQC", "extdata/ssvQC_peak_config.csv")
feature_config = QcConfigFeatures.parse(feature_config_file)
}
